generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                       String    @id @default(uuid())
    username                 String    @unique
    email                    String    @unique
    passwordHash             String
    firstName                String
    lastName                 String
    dateOfBirth              DateTime
    gender                   String?
    phoneNumber              String?
    address                  String?
    city                     String?
    state                    String?
    zipCode                  String?
    country                  String?
    maritalStatus            String?
    employmentStatus         String?
    occupation               String?
    employerName             String?
    taxFilingStatus          String?
    dependentsCount          Int?
    preferredCurrency        String?
    subscriptionType         String? // Free, Premium, etc.
    language                 String?
    communicationPreferences String?
    userRole                 String? // Admin, User, etc.
    avatar                   String? // Profile picture URL
    createdAt                DateTime  @default(now())
    lastLogin                DateTime?
    lastUpdate               DateTime  @updatedAt
    isVerified               Boolean   @default(false)
    twoFactorEnabled         Boolean   @default(false)
    lastPasswordChange       DateTime?
    accountStatus            String? // Active, Suspended, Deactivated
    loginAttempts            Int?      @default(0)

    jobApplications JobApplication[]
    darkThemeId     String?
    lightThemeId    String?
    darkTheme       Theme?           @relation("UserDarkTheme", fields: [darkThemeId], references: [id])
    lightTheme      Theme?           @relation("UserLightTheme", fields: [lightThemeId], references: [id])
}

model JobApplication {
    id                 Int               @id @default(autoincrement())
    userId             String?
    user               User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
    companyName        String
    positionTitle      String
    location           String?
    jobPostingUrl      String?
    applicationDate    DateTime
    source             String?
    resumeVersion      String?
    coverLetter        String?
    applicationStatus  ApplicationStatus @default(APPLIED)
    lastUpdatedDate    DateTime          @updatedAt
    followUpDate       DateTime?
    nextAction         String?
    recruiterName      String?
    recruiterEmail     String?
    recruiterPhone     String?
    hiringManagerName  String?
    referralContact    String?
    interviewRounds    InterviewRound[]
    salaryOffered      Float?
    benefits           String?
    equity             String?
    prosAndCons        String?
    jobDescription     String?
    companyResearch    String?
    applicationNotes   String?
    offerReceived      Boolean           @default(false)
    offerAccepted      Boolean           @default(false)
    reasonForRejection String?
    resumeFile         String?
    coverLetterFile    String?
    portfolioLinks     String?
    jobCategory        JobCategory?
    industry           Industry?
    priorityLevel      PriorityLevel?
    externalJobId      String?
    apiLinks           String?
    createdAt          DateTime          @default(now())
}

model InterviewRound {
    id                Int            @id @default(autoincrement())
    jobApplicationId  Int
    interviewDate     DateTime
    interviewers      String
    interviewFeedback String?
    jobApplication    JobApplication @relation(fields: [jobApplicationId], references: [id])
}

enum ApplicationStatus {
    APPLIED
    PHONE_SCREEN
    INTERVIEW_SCHEDULED
    INTERVIEW_COMPLETED
    OFFER_RECEIVED
    REJECTED
    ACCEPTED
}

enum JobCategory {
    FULL_TIME
    PART_TIME
    CONTRACT
    INTERNSHIP
}

enum Industry {
    TECH
    FINANCE
    HEALTHCARE
    MARKETING
    EDUCATION
    OTHER
}

enum PriorityLevel {
    HIGH
    MEDIUM
    LOW
}

model Theme {
    id   String @id @default(uuid())
    name String @unique
    mode String // Either 'dark' or 'light'

    // Primary Colors
    primary      String? // Store the main primary color (e.g., primary500)
    primaryLight String? // Optional: Store lighter primary color (e.g., primary100)

    // Grey Colors
    greyMain  String? // Store the main grey color (e.g., grey500)
    greyLight String? // Optional: Store lighter grey color (e.g., grey100)
    greyDark  String? // Optional: Store darker grey color (e.g., grey700)

    // Accent Colors
    greenAccent String? // Store green accent color (e.g., greenAccent500)
    redAccent   String? // Store red accent color (e.g., redAccent500)
    blueAccent  String? // Store blue accent color (e.g., blueAccent500)

    background String? // Background color
    text       String? // Text color

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    usersDark  User[] @relation("UserDarkTheme")
    usersLight User[] @relation("UserLightTheme")
}
